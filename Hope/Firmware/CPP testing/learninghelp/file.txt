
Eigen::Matrix3d stationpositions {
    {5,1,1},
    {1,5,1},
    {1,-5,1}
};

double stationdistances[3] = {10,10,10};

Eigen::Vector3d location;


#include <Eigen/Dense>

    int status = tripos(/*stationpositions,stationdistances*/);



int tripos(/*const Eigen::Matrix3d stations, const double distances[3]*/);

const int count = 3;

    size_t rows = count * (count - 1) / 2;
    Eigen::MatrixXd m(rows, 3);
    Eigen::VectorXd b(rows);

    Eigen::Vector3d beacon1, beacon2;

    size_t row = 0;
    double x1, x2, y1, y2, z1, z2, r1, r2;
    for (size_t i=0; i<count; ++i) {
        beacon1(0) = stations(i,0);
        beacon1(1) = stations(i,1);
        beacon1(2) = stations(i,2);
        //std::cout <<"beacon1\n" << beacon1<<"\n";

        for (size_t j=i+1; j<count; ++j) {
            beacon2(0) = stations(j,0);
            beacon2(1) = stations(j,1);
            beacon2(2) = stations(j,2);

            //std::cout <<"beacon2\n"<< beacon2 <<"\n";
            
            x1 = beacon1(0), y1 = beacon1(1), z1 = beacon1(2);
            x2 = beacon2(0), y2 = beacon2(1), z2 = beacon2(2);
            r1 = distances[i];
            r2 = distances[j];
            m(row, 0) = x1 - x2;
            m(row, 1) = y1 - y2;
            m(row, 2) = z1 - z2;
            b(row) = ((pow(x1, 2)-pow(x2, 2)) +
                      (pow(y1, 2)-pow(y2, 2)) +
                      (pow(z1, 2)-pow(z2, 2)) -
                      (pow(r1, 2) - pow(r2, 2))) / 2;
            row++;
        }
    }

    location = m.jacobiSvd(Eigen::ComputeThinU|Eigen::ComputeThinV).solve(b);
    
    std::cout <<"location??\n"<< location <<"\n";